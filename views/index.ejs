<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <!-- Tailwind css -->
  <link rel="stylesheet" href="css/output.css">
  <!-- Jquery -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <!-- Marked -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <style>
    body {
      height: 100%;
      overflow: auto;
      /* Cambiado a auto */
      background-color: #212121;
      color: white;
    }

    .scrollbar {
      overflow-y: scroll;
      height: 100%;
      height: calc(100vh - 100px);
      /* scrollbar-width: thin; */
      scrollbar-color: #424242 #222222;
    }

    .scrollbar::-webkit-scrollbar {
      width: 32px;
    }

    .scrollbar::-webkit-scrollbar-thumb {
      background-color: #424242;
      border-radius: 10px;
    }

    .scrollbar::-webkit-scrollbar-track {
      background: #222222;
    }

    .loader-container {
      background-color: rgba(0, 0, 0, 0.7);
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .loader {
      width: 48px;
      height: 48px;
      display: inline-block;
      position: relative;
    }

    .loader::after,
    .loader::before {
      content: '';
      box-sizing: border-box;
      width: 48px;
      height: 48px;
      border-radius: 50%;
      border: 2px solid #FFF;
      position: absolute;
      left: 0;
      top: 0;
      animation: animloader 2s linear infinite;
    }

    .loader::after {
      animation-delay: 1s;
    }

    @keyframes animloader {
      0% {
        transform: scale(0);
        opacity: 1;
      }

      100% {
        transform: scale(1);
        opacity: 0;
      }
    }

    .hidden {
      display: none;
    }

    .text {
      position: absolute;
      bottom: 30%;
      left: 50%;
      transform: translateX(-50%);
      color: #666;
      text-align: center;
    }
  </style>

</head>

<body class="bg-[#212121] text-white">


  <main class="scrollbar scroll-smooth mx-5">
    <div class="container mx-auto relative pt-5 md:max-w-[1000px]">
      <!-- Este ul es donde se ven todos los mensajes -->
      <ul class="flex flex-col gap-10">
      </ul>


      <!-- Send Message User -->
      <!-- Aqui envio el mensaje del usuario -->
      <div class="fixed bottom-0 left-0 right-0 bg-[#212121] mx-3" id="divForm">
        <form id="form" class="mb-10 mt-3 container mx-auto md:max-w-[1000px]">
          <div class="relative">
            <input type="text" placeholder="Escribe un mensaje..." class="py-3 px-3 rounded-full outline-none bg-[#363636] flex-grow w-full pr-16">
            <button id="btnSend" disabled type="submit" class="absolute top-[3px] right-[3px] bg-[#252525] p-3 rounded-full flex items-center justify-center hover:bg-white hover:text-black transition-colors duration-300 ease-in-out">
              <i class="i-streamline-send-email text-lg"></i>
            </button>
          </div>
        </form>
      </div>


      <!-- Template -->

      <!-- Estos son templates no aparecen en la pagina los uso como guia para que js los ponga en el DOM -->
      <!-- Este es el template de como se va ver el mensaje del usuario -->
      <template id="template-user">
        <li class="flex justify-end mb-2">
          <div class="flex flex-col items-end">
            <p class="text-start max-w-[600px] bg-[#292929] text-white p-4 rounded-lg">Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum beatae dolor, veniam consectetur quibusdam amet, magnam provident ea odio rerum est explicabo mollitia nisi. Itaque repudiandae sit earum maxime quasi?</p>
          </div>
        </li>
      </template>



      <!-- Este es el template de como se va ver el mensaje del assistant -->
      <template id="template-assistant">
        <li class="flex gap-2 items-start">
          <div class="flex items-center justify-center p-1 rounded-full shadow-md">
            <i class="i-token-branded-elf text-2xl"></i>
          </div>
          <div class="col-span-11">
            <p class="shadow-md p-2 rounded-lg">
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloribus perspiciatis repudiandae quis optio quo officia debitis doloremque fugiat harum earum quaerat maxime magni quam vero, pariatur, iusto nostrum beatae placeat. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eaque sint temporibus sapiente molestiae fuga illum tenetur, itaque quasi, deserunt cumque odio, mollitia facere nobis labore minima! Rem quisquam molestias repellat? Lorem, ipsum dolor sit amet consectetur adipisicing elit. Magni ex tempore quasi quam fugiat. Aspernatur libero dolores, quisquam nesciunt quaerat eaque nobis quasi harum, praesentium ipsum obcaecati, voluptatibus vitae voluptatum! Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus impedit quasi optio. Quae sapiente, velit, dolorem fugit iste, ipsum a veniam minus error amet praesentium ratione voluptates aut illo. Non?
            </p>
          </div>
        </li>
      </template>

      <div class="loader-container" id="loading">
        <div class="loader"></div>
        <span class="text" id="text">Cargando</span>
      </div>

    </div>


  </main>


  <script type="module">
    // Importamos el modelo de lenguaje
    marked.setOptions({
      sanitize: false
    });
    import {
      CreateMLCEngine
    } from "https://esm.run/@mlc-ai/web-llm";
    const arrMessages = [];
    const SELECTED_MODEL = "Llama-3.2-1B-Instruct-q4f32_1-MLC"; // Seleccionamos el modelo pero hay muchos en la página de git del repo  de WEB-LLM
    const engine = await CreateMLCEngine(SELECTED_MODEL, { // Creamos el motor de lenguaje
      initProgressCallback: (progress) => {
        $('#text').text(progress.text);
        if (progress.progress == 1) {
          $('#loading').addClass('hidden');
          $('#btnSend').removeAttr('disabled');
        }
      },
    });

    function addMessage(text, sender) {
      $('#btnSend').attr('disabled', 'disabled');
      let p;
      if (sender === 'assistant') {
        const cloneTemplate = $('#template-assistant')[0].content.cloneNode(true);
        p = cloneTemplate.querySelector('p');
        p.innerHTML = text
        $('.container ul').append(cloneTemplate);
      } else {
        const cloneTemplate = $('#template-user')[0].content.cloneNode(true);
        p = cloneTemplate.querySelector('p');
        p.innerHTML = marked.parse(text);
        $('.container ul').append(cloneTemplate);
      }
      return p;
    }

    $(document).ready(() => {
      const form = $('#form');
      let lastUserMessage = ""; // Variable para almacenar el último mensaje del usuario

      form.submit(async (e) => {
        e.preventDefault();
        const messageUserText = form.find('input').val().trim(); // Eliminar espacios

        // Evitar enviar mensajes vacíos o duplicados
        if (!messageUserText || messageUserText === lastUserMessage) return;

        lastUserMessage = messageUserText; // Actualizar el último mensaje

        // Mensaje del usuario
        addMessage(messageUserText, 'user');
        const messageUser = {
          role: 'user',
          content: messageUserText
        };
        arrMessages.push(messageUser);
        form.find('input').val('');

        $('#btnSend').attr('disabled', 'disabled'); // Deshabilitar el botón de enviar
        form.find('input').attr('disabled', 'disabled'); // Deshabilitar el campo de texto

        // Mensaje del assistant
        const parts = await engine.chat.completions.create({
          messages: arrMessages,
          stream: true
        });

        let reply = "";
        let reload = addMessage("", 'assistant');
        for await (const part of parts) {
          const choice = part.choices[0];
          const content = choice.delta.content ?? "";
          reply += content;
          reload.innerHTML = marked.parse(reply);
          $('.scrollbar').animate({
            scrollTop: $('.scrollbar')[0].scrollHeight
          }, 300);
        }

        arrMessages.push({
          role: 'assistant',
          content: reply
        });

        $('#btnSend').removeAttr('disabled'); // Habilitar el botón de enviar
        form.find('input').removeAttr('disabled'); // Habilitar el campo de texto
      });
    });
  </script>


</body>

</html>